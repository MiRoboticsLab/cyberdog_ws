cmake_minimum_required(VERSION 3.8)
project(bream_vendor)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-w)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(ament_cmake_ros REQUIRED)
find_package(rclcpp REQUIRED)



#file(GLOB Sources src/*.cpp src/*.c)


add_library(${PROJECT_NAME} SHARED
  src/bream.cpp
  src/bream_endian.cpp
  src/bream_handler.cpp
  src/bream_helper.cpp
  src/patch_downloader.cpp
  src/bream_callbacks.cpp
  src/lodi2_os_glue_posix.cpp
  src/lodi2_ssi_spi.cpp
)
target_include_directories(${PROJECT_NAME} PUBLIC
$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
$<INSTALL_INTERFACE:include>)


target_compile_features(${PROJECT_NAME} PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17

ament_target_dependencies(
  ${PROJECT_NAME}
  rclcpp
)


install (
    DIRECTORY src/
    DESTINATION include/bream_vendor
    FILES_MATCHING PATTERN "*.h*"
)

install(
  TARGETS ${PROJECT_NAME}
  EXPORT export_${PROJECT_NAME}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
  INCLUDES DESTINATION include
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  ament_lint_auto_find_test_dependencies()
  find_package(ament_cmake_gtest REQUIRED)
endif()

ament_export_include_directories(
  include
  )
ament_export_libraries(${PROJECT_NAME})
ament_export_targets(export_${PROJECT_NAME})
ament_package()
